const { bigIntToBytes, bytesToBigInt } = require("./util.js");

const spread = (x) => {
  let X = BigInt(x);
  X =
    (X | (X << BigInt("64"))) &
    BigInt(
      "0b000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111"
    );

  X =
    (X | (X << BigInt("32"))) &
    BigInt(
      "0b000000000000000000000000000000001111111111111111000000000000000000000000000000001111111111111111000000000000000000000000000000001111111111111111000000000000000000000000000000001111111111111111"
    );

  X =
    (X | (X << BigInt("16"))) &
    BigInt(
      "0b000000000000000011111111000000000000000011111111000000000000000011111111000000000000000011111111000000000000000011111111000000000000000011111111000000000000000011111111000000000000000011111111"
    );

  X =
    (X | (X << BigInt("8"))) &
    BigInt(
      "0b000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111"
    );

  X =
    (X | (X << BigInt("4"))) &
    BigInt(
      "0b000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011"
    );

  X =
    (X | (X << BigInt("2"))) &
    BigInt(
      "0b001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001"
    );
  return X;
};

const unspread = (x) => {
  let X = BigInt(x);
  X =
    X &
    BigInt(
      "0b001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001"
    );
  X =
    (X | (X >> BigInt("2"))) &
    BigInt(
      "0b000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011000011"
    );

  X =
    (X | (X >> BigInt("4"))) &
    BigInt(
      "0b000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111000000001111"
    );

  X =
    (X | (X >> BigInt("8"))) &
    BigInt(
      "0b000000000000000011111111000000000000000011111111000000000000000011111111000000000000000011111111000000000000000011111111000000000000000011111111000000000000000011111111000000000000000011111111"
    );

  X =
    (X | (X >> BigInt("16"))) &
    BigInt(
      "0b000000000000000000000000000000001111111111111111000000000000000000000000000000001111111111111111000000000000000000000000000000001111111111111111000000000000000000000000000000001111111111111111"
    );

  X =
    (X | (X >> BigInt("32"))) &
    BigInt(
      "0b000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111"
    );

  X =
    (X | (X >> BigInt("64"))) &
    BigInt(
      "0b1111111111111111111111111111111111111111111111111111111111111111"
    );

  return X;
};

function spacetimestampEncoder(v, b) {
  const { t, x, y, z } = v;
  if (t > BigInt("0xffffffffffffffff")) {
    throw Error(
      "Error encoding spacetimestamp: Not in valid range: 0 <= t <= 2^64-1."
    );
  }
  if (x > BigInt("0xffffffffffffffff")) {
    throw Error(
      "Error encoding spacetimestamp: Not in valid range: 0 <= x <= 2^64-1."
    );
  }
  if (y > BigInt("0xffffffffffffffff")) {
    throw Error(
      "Error encoding spacetimestamp: Not in valid range: 0 <= y <= 2^64-1."
    );
  }
  if (z > BigInt("0xffffffffffffffff")) {
    throw Error(
      "Error encoding spacetimestamp: Not in valid range: 0 <= z <= 2^64-1."
    );
  }
  const xyz =
    (spread(x) << BigInt("2")) | (spread(y) << BigInt("1")) | spread(z);
  bigIntToBytes(t, b, 0, 8);
  bigIntToBytes(xyz, b, 8, 24);
  return null;
}

function spacetimestampDecoder(b, blob) {
  const t = bytesToBigInt(b, 0, 8);
  const xyz = bytesToBigInt(b, 8, 24);
  const x = unspread(xyz >> BigInt("2"));
  const y = unspread(xyz >> BigInt("1"));
  const z = unspread(xyz);

  return { t, x, y, z };
}

const spacetimestampType = {
  encoder: spacetimestampEncoder,
  decoder: spacetimestampDecoder,
};

module.exports = { spacetimestampType };
